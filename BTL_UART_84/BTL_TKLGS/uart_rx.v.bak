// File: uart_rx.v
// Chức năng: Nhận 1 byte dữ liệu qua giao thức UART 8-N-1.
module uart_rx #(
    parameter CLKS_PER_BIT = 5208 // Phải giống với uart_tx
) (
    input  wire        clk,
    input  wire        reset,
    input  wire        rx_serial,
    output reg [7:0]  data_out,
    output reg         rx_valid
);

    localparam STATE_IDLE      = 3'b000;
    localparam STATE_START_BIT = 3'b001;
    localparam STATE_DATA_BITS = 3'b010;
    localparam STATE_STOP_BIT  = 3'b011;

    reg [2:0]  state = STATE_IDLE;
    reg [15:0] clk_counter = 0;
    reg [2:0]  bit_index = 0;
    reg [7:0]  data_reg;

    always @(posedge clk) begin
        if (reset) begin
            state <= STATE_IDLE;
            rx_valid <= 0;
        end else begin
            rx_valid <= 0; // rx_valid chỉ là một xung
            case (state)
                STATE_IDLE: begin
                    if (rx_serial == 0) begin // Phát hiện start bit
                        clk_counter <= 0;
                        state <= STATE_START_BIT;
                    end
                end
                STATE_START_BIT: begin
                    // Chờ đến giữa bit để lấy mẫu
                    if (clk_counter == (CLKS_PER_BIT / 2) - 1) begin
                        if (rx_serial == 0) begin // Vẫn là start bit
                            clk_counter <= 0;
                            bit_index <= 0;
                            state <= STATE_DATA_BITS;
                        end else begin // Nhiễu, quay lại IDLE
                            state <= STATE_IDLE;
                        end
                    end else begin
                        clk_counter <= clk_counter + 1;
                    end
                end
                STATE_DATA_BITS: begin
                    // Chờ hết 1 bit
                    if (clk_counter < CLKS_PER_BIT - 1) begin
                        clk_counter <= clk_counter + 1;
                    end else begin
                        clk_counter <= 0;
                        data_reg[bit_index] <= rx_serial;
                        if (bit_index < 7) begin
                            bit_index <= bit_index + 1;
                        end else begin
                            state <= STATE_STOP_BIT;
                        end
                    end
                end
                STATE_STOP_BIT: begin
                    if (clk_counter < CLKS_PER_BIT - 1) begin
                        clk_counter <= clk_counter + 1;
                    end else begin
                        if (rx_serial == 1) begin // Stop bit hợp lệ
                            data_out <= data_reg;
                            rx_valid <= 1;
                        end
                        state <= STATE_IDLE;
                    end
                end
                default:
                    state <= STATE_IDLE;
            endcase
        end
    end
endmodule